category:
- testing
- compliance
- ui
claims:
- kind: primary
  text: '| **Path** | **Type** | **LoC** | **Last Commit** | **Findings** |

    | --- | --- | --- | --- | --- |

    | `.github/workflows/python.yml` | YAML | *(не удалось получить)* | 6829775 |
    Конфигурация CI pipeline для проекта (автоматический запуск тестов; логика бота
    не затрагивается). |

    | `.gitignore` | Text | 8 | f30c327 | Стандартный список исключений (виртуальное
    окружение, кэш, артефакты); проблем не выявлено. |

    | `main.py` | Python | 21 | 30e4608 | Точка входа бота: инициализация `Dispatcher`
    и регистрация роутера из `buyer_handlers`【41†L13-L17】. Обращает внимание, что
    импортируется модуль `handlers` (возможно, устаревший) вместо непосредственного
    `bot/buyer_handlers` – потенциальная несогласованность импорта. |

    | `README.md` | Markdown | 109 | f30c327 | Основное описание проекта, инструкции
    по запуску. Соответствует коду (Python 3.10, зависимости, структура проекта).
    Проблемы в логике не относятся. |

    | `ROADMAP.md` | Markdown | 37 | f30c327 | План разработки MVP: большинство пунктов
    не выполнены (todo). Отмечает незавершённость FSM, генерации deeplink, механики
    лояльности и fallback-сценариев. |

    | `readmeMVP.md` | Markdown | 13 | f30c327 | Краткое описание MVP на русском.
    Логических замечаний нет – файл служит презентацией возможностей. |

    | `requirements.txt` | Text | ~40 | f30c327 | Список зависимостей (aiogram 3.x,
    requests, BeautifulSoup, pandas и др.). Соответствует коду; критических дыр не
    содержит. |

    | `bot/handlers.py` | Python | 102 | f30c327 | Основной сценарий FSM (старт, лояльность,
    сбор данных от пользователя). Дублирует логику старта (`/start`)【64†L3-L10】, которую
    также реализует `buyer_handlers.py`. **Нет проверки корректности ввода**: суммы,
    адреса кошелька и email не валидируются на этапах ввода – бот сразу переходит
    к следующим состояниям. Имеется TODO на проверку кода брокера (white-list)【64†L49-L57】,
    что указывает на незавершённость этой части. В текущей версии модуль **не используется**
    (вместо него подключён `buyer_handlers`). |

    | `bot/buyer_handlers.py` | Python | ~120 | 5accaa3 | Альтернативный FSM-сценарий
    покупки криптовалюты с выбором агрегатора. Читает CSV-данные и выбирает топ агрегатор
    через `AggregatorSelector`【2†L15-L23】. **Дублирует обработчик `/start`** аналогично
    `handlers.py`【2†L33-L40】, потенциально конфликтуя, хотя в коде подключён только
    один из них. **Проверки ввода отсутствуют**: пользовательская сумма конвертируется
    в float без try/except【65†L37-L45】 (при нечисловом вводе возможна ошибка), адрес
    кошелька не проверяется, email вообще не запрашивается (подставляется заглушка
    `test@email.com`【65†L43-L47】). Таким образом, бот работает по принципу *fail-open*
    для этих полей. |

    | `bot/states.py` | Python | 24 | f30c327 | Определяет множество состояний `CryptoBotStates`
    для поэтапного диалога【44†L1-L9】. Эти состояния соответствуют расширенному сценарию
    (лояльность, KYC, история), который реализован в `handlers.py`. В альтернативном
    сценарии `buyer_handlers` используется отдельная группа состояний (`CryptoBuy`),
    поэтому часть состояний из этого файла может оставаться неиспользованной. |

    | `bot/keyboards.py` | Python | 136 | f30c327 | Набор готовых клавиатур ответа
    для каждого шага FSM (язык, сумма, криптовалюта, метод оплаты и т.д.). Не содержит
    исполненного кода, только данные. **Замечание**: эти клавиатуры используются в
    `handlers.py` (расширенный сценарий) и не интегрированы в упрощённый сценарий
    `buyer_handlers` (там ввод текста вручную). |

    | `core/aggregator_engine.py` | Python | 106 | 5accaa3 | Модуль для генерации
    deeplink’ов с учётом кластеров стран и порогов сумм. **Незавершён**: функции загрузки
    данных `_load_data` и `_load_weights` просто выдают `raise NotImplementedError`【11†L99-L106】.
    Использование модуля в текущем коде отсутствует (бот вместо него напрямую использует
    `AggregatorSelector` и `DeeplinkGenerator`). Функции вроде `_infer_kyc` присутствуют,
    но интеграция проверки KYC в бот не реализована. |

    | `core/aggregator_selector.py` | Python | 93 | a8fd1c5 | Класс для выбора топ-агрегаторов
    по стране, сумме и способу оплаты. Учитывает лимиты и необходимость KYC. **Важно**:
    реализованы «fail-open» проверки – если данных по агрегатору нет, они не блокируются.
    Например, `check_limits` возвращает True при отсутствии или неверном формате лимитов【13†L80-L87】,
    а `check_kyc` – True, если агрегатор не найден в таблице (то есть предполагается
    отсутствие требований)【13†L87-L93】. Это означает, что при пробелах в данных агрегатор
    может пройти отбор без ограничений. Модуль не использует передаваемую таблицу
    `tbl2` (региональный рейтинг), что может указывать на нереализованную логику.
    |

    | `core/logging_config.py` | Python | 35 | 4c76fd8 | Настраивает логирование (загрузка
    `logging.yml` илиfallback на ротацию файла). Завершённый модуль; существенных
    проблем нет. Уровень логирования по умолчанию DEBUG (через logging.yml) – в продакшене
    обычно снижают уровень, но на функциональность бота это не влияет. |

    | `core/utils.py` | Python | 29 | 3afe1d5 | Утилиты: загрузка YAML с fallback
    и класс кеширования. Реализованы корректно. Функция `load_yaml_config` подавляет
    ошибки чтения и возвращает пустой словарь【17†L4-L12】 – в контексте логики это
    *fail-open* подход (если конфиг не найден или ошибочен, используются значения
    по умолчанию). Нарушений логики не выявлено. |

    | `core/signature.py` | Python | 35 | b08b87b | Поддержка подписи параметров для
    некоторых агрегаторов. Имеется базовый класс `SignatureStrategy` с нереализованным
    методом `sign`【18†L4-L7】 (ожидается переопределение). Реестр `_REGISTRY` наполняется
    только двумя реализациями (@register_signature для “bitvalex” и “cryptomus”)【18†L23-L31】
    – остальные агрегаторы с цифровой подписью не охвачены. В текущей версии бот нигде
    явно не вызывает эту функциональность (signature применяется внутри `AggregatorEngine`,
    который не используется). |

    | `core/deeplink_builder.py` | Python | 61 | 8f9a445 | Обёртка над Jinja2 для
    формирования ссылок. Простая реализация: шаблон + метод `render(params)` с отловом
    исключений (возвращает пустую строку при ошибке рендеринга【14†L22-L30】). Предусмотрена
    валидация обязательных параметров (`validate_deeplink_params`), однако она нигде
    не вызывается. В целом модуль завершён; логических дыр не обнаружено. |

    | `core/deeplink_generator.py` | Python | 36 | a8fd1c5 | Генерирует финальный
    URL deeplink’а на основе базового URL и словаря параметров. Проверяет наличие
    обязательных полей и бросает исключение, если чего-то нет【15†L25-L33】 – тем самым
    предотвращает генерацию некорректной ссылки. Рекурсивно разворачивает вложенные
    параметры (поддерживает структуры типа `details.wallet`). Модуль работает корректно;
    единственный нюанс – если для агрегатора не задано сопоставление параметров в
    `table_4.csv`, ссылка сформируется без них (возможно, с пропуском важных данных,
    так как отсутствие записи в `table_4.csv` значит отсутствие контроля требований
    для этого агрегатора). |

    | `config/logging.yml` | YAML | 6 | 2efa599 | Конфигурация логирования: простой
    консольный логгер DEBUG. Особенностей нет – все логи пишутся в консоль, что упрощает
    отладку. В боевом окружении может потребоваться иной уровень. |

    | `config/tier_thresholds.yml` | YAML | 3 | c62fb06 | Пороговые суммы для тиров
    KYC (Tier1=500, Tier2=2000, Tier3=10000). Используется `AggregatorEngine` для
    определения максимальной суммы без усиленной верификации. Совпадает с логикой
    по умолчанию (в коде Tier3 задан как ∞, но подгружается значение 10000). Корректный
    файл, проблем не наблюдается. |

    | `data/📚 Summary.md` | Markdown | 53 | f30c327 | Обзор и пояснения к проведённым
    исследованиям данных агрегаторов (лимиты, комиссии, рейтинги, параметры интеграции).
    Не исполняемый файл. Полезен для понимания таблиц CSV; на логику бота не влияет
    напрямую. |

    | `data/table_1.csv` | CSV | 21 | f30c327 | Основная таблица агрегаторов: поддержка
    стран, лимиты (Min/Max), требования KYC, пример deeplink и пр. Используется для
    фильтрации в `check_limits`/`check_kyc` и для получения шаблона ссылки. **Важно**:
    если агрегатор отсутствует или данные неполные, проверки в коде по умолчанию пропустят
    его (fail-open, см. `AggregatorSelector`)【13†L80-L87】【13†L87-L93】. Сама таблица
    заполнена по результатам исследования; явных ошибок нет. |

    | `data/table_2.csv` | CSV | ~64 | f30c327 | Таблица региональных рейтингов агрегаторов
    (маркирует лучший/второй по качеству и рискованные варианты по кластерам стран
    и методам). **На данный момент напрямую не используется**: хотя файл загружается【2†L15-L23】,
    методы `AggregatorSelector` не задействуют эти данные. Вероятно, задел на будущее
    расширение логики выбора с учётом рейтингов. |

    | `data/table_3_500.csv` | CSV | ~80 | f30c327 | Таблица топ-3 агрегаторов для
    каждой страны при сумме ≤500 (Tier1). Используется в логике: загружается и передаётся
    в `AggregatorSelector` как `tbl3[500]`【2†L15-L23】. На основе этой и аналогичных
    таблиц формируется список подходящих агрегаторов (`select_top`). Замечаний по
    содержимому нет, данные соответствуют исследованию. |

    | `data/table_3_2000.csv` | CSV | ~80 | f30c327 | Аналогично таблице Tier1, но
    для суммы ≤2000 (Tier2). Также участвует в подборе агрегаторов (`tbl3[2000]`).
    Логика использования аналогична, проблем не обнаружено. |

    | `data/table_3_10000.csv` | CSV | ~80 | f30c327 | Таблица топ-3 для суммы ≤10000
    (Tier3). Применяется при `amount > 2000`. Все три таблицы TierX вместе обеспечивают
    покрытие различных диапазонов сумм. Логика выборки учитывает эти данные корректно.
    |

    | `data/table_4.csv` | CSV | 22 | f30c327 | Таблица параметров интеграции агрегаторов
    (какие query-параметры поддерживают: автозаполнение адреса, email, skip KYC и
    т.п.). Используется в `DeeplinkGenerator` для маппинга полей и определения обязательных
    параметров. Если для агрегатора нет записи, `DeeplinkGenerator` не будет знать
    о его обязательных параметрах – это может привести к ситуации, что ссылка с пропущенными
    данными всё же сгенерируется (см. отсутствие проверки при пустом списке required).
    В текущем наборе агрегаторов ключевые параметры присутствуют; проблем в файле
    нет. |

    | `crypto_decline_index/scrape_decline_index.py` | Python | 207 | f30c327 | Скрипт
    для сбора статистики отказов платежей (Decline Rate) с Trustpilot и Reddit. Запускается
    отдельно, результаты сохраняет в CSV. Код содержит ряд продвинутых функций (обход
    Cloudflare, таймаут 15 минут, резюмирование работы). На работу основного бота
    влияния не оказывает. Завершённый модуль – замечаний нет, кроме того что он не
    интегрирован в основной сценарий. |

    | `crypto_decline_index/table_on_ramp.csv` | CSV | 26 | f30c327 | Таблица агрегаторов,
    аналогичная `data/table_1.csv` (те же колонки)【34†L0-L1】【69†L3-L11】. Видимо, исходная
    сыровая таблица для расчёта decline-index. Содержит ссылки на источники (официальные
    и неофициальные) и использовалась скриптом `scrape_decline_index.py`. По сути
    дублирует `table_1.csv` – потенциально можно было избежать двойного хранения.
    |

    | `crypto_decline_index/decline_index.csv` | CSV | 19 | f30c327 | Результирующая
    таблица с рассчитанным индексом отказов (столбцы: aggregator, trustpilot, reddit,
    decline_index). **Не используется в коде бота напрямую** – её данные были агрегированы
    в качественные оценки (“low”, “medium”, etc.) в `table_1.csv`. Присутствует для
    полноты исследования. |

    | `static/mvp_demo.gif` | Binary (image) | *(n/a)* | f30c327 | Анимация-демонстрация
    работы бота. Не участвует в логике, только для документации/презентации. |

    | `static/roadmap.png` | Binary (image) | *(n/a)* | f30c327 | Изображение дорожной
    карты проекта (визуализация этапов из ROADMAP.md). На исполнение кода не влияет.
    |


    '
id: DR_0001
recommendations:
- change: review and implement recommendations
  dod:
  - UX review accepted
  - manual review by compliance officer
  - pytest -q passes
  impact_paths:
  - docs/compliance/
  - static/
  - templates/
  - tests/
  risks:
  - KYC limitations
  - flaky tests
  - regulatory changes
sha256: f177e769672cd2fc5fc3c9cbff41275e97f79825cef0b45bca491f738dd8fb2f
span: L1587-L2396
title: '| **Path** | **Type** | **LoC** | **Last Commit** | **Findings** |'
trace:
  file: updates/21-9-43-Bot_Development_Roadmap_Analysis.json
  source_spans:
  - L1587-L2396
