from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from .states import CryptoBotStates
from .keyboards import *

router = Router()

@router.message(F.text == "/start")
async def start_handler(msg: Message, state: FSMContext):
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!\n\n‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n[‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å –Ω—É–ª–µ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é]\n\n[RU] [EN] [DE]",
        reply_markup=start_kb
    )
    await state.set_state(CryptoBotStates.start)

@router.message(CryptoBotStates.start)
async def loyalty_intro_handler(msg: Message, state: FSMContext):
    await msg.answer(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–ª–µ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∏–ª–∏ –æ–±—â–∏–π –æ–±—ä—ë–º –ø–æ–∫—É–ø–æ–∫ ‚Äî –æ—Ç 100,000$.\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: 0/10 | $0/$100,000",
        reply_markup=loyalty_intro_kb
    )
    await state.set_state(CryptoBotStates.loyalty_intro)

@router.message(CryptoBotStates.loyalty_intro)
async def loyalty_details_handler(msg: Message, state: FSMContext):
    await msg.answer(
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É. –ù—É–ª–µ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è ‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤ –¥–ª—è –ª–æ—è–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—Å—ë –ø—Ä–æ–∑—Ä–∞—á–Ω–æ, –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–Ω –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏.",
        reply_markup=loyalty_details_kb
    )
    await state.set_state(CryptoBotStates.loyalty_details)

@router.message(CryptoBotStates.loyalty_details)
async def nationality_handler(msg: Message, state: FSMContext):
    await msg.answer("üåê –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=nationality_kb)
    await state.set_state(CryptoBotStates.nationality)

@router.message(CryptoBotStates.nationality)
async def residence_handler(msg: Message, state: FSMContext):
    await msg.answer("üåç –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=None)
    await state.set_state(CryptoBotStates.residence)

@router.message(CryptoBotStates.residence)
async def fiat_currency_handler(msg: Message, state: FSMContext):
    await msg.answer("üí∂ –í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —É –≤–∞—Å —Å—Ä–µ–¥—Å—Ç–≤–∞?", reply_markup=fiat_currency_kb)
    await state.set_state(CryptoBotStates.fiat_currency)

@router.message(CryptoBotStates.fiat_currency)
async def amount_handler(msg: Message, state: FSMContext):
    await msg.answer("üí∏ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?", reply_markup=amount_kb)
    await state.set_state(CryptoBotStates.amount)

@router.message(CryptoBotStates.amount)
async def crypto_handler(msg: Message, state: FSMContext):
    await msg.answer("üí± –ö–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=crypto_kb)
    await state.set_state(CryptoBotStates.crypto)

@router.message(CryptoBotStates.crypto)
async def payment_method_handler(msg: Message, state: FSMContext):
    await msg.answer(
        "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\nSEPA ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è)\n–ö–∞—Ä—Ç–∞ ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –æ—Ç–∫–∞–∑—ã.",
        reply_markup=payment_method_kb
    )
    await state.set_state(CryptoBotStates.payment_method)

@router.message(CryptoBotStates.payment_method)
async def wallet_or_broker_handler(msg: Message, state: FSMContext):
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=wallet_or_broker_kb)
    await state.set_state(CryptoBotStates.wallet_or_broker)

@router.message(CryptoBotStates.wallet_or_broker)
async def broker_code_handler(msg: Message, state: FSMContext):
    if msg.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç":
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞:")
        await state.set_state(CryptoBotStates.broker_code)
    else:
        await msg.answer("üõ°Ô∏è –î–ª—è —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–¥–µ–ª–∫–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.", reply_markup=user_wallet_kb)
        await state.set_state(CryptoBotStates.user_wallet)

@router.message(CryptoBotStates.broker_code)
async def user_wallet_direct_handler(msg: Message, state: FSMContext):
    # TODO: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –±—Ä–æ–∫–µ—Ä–∞ –ø–æ whitelist
    await msg.answer("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=user_wallet_direct_kb)
    await state.set_state(CryptoBotStates.user_wallet_direct)

@router.message(CryptoBotStates.user_wallet_direct)
async def kyc_check_handler(msg: Message, state: FSMContext):
    await msg.answer("‚ö†Ô∏è –î–ª—è —Å—É–º–º—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (KYC).", reply_markup=kyc_check_kb)
    await state.set_state(CryptoBotStates.kyc_check)

@router.message(CryptoBotStates.user_wallet)
async def gen_address_handler(msg: Message, state: FSMContext):
    await msg.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...", reply_markup=gen_address_kb)
    await state.set_state(CryptoBotStates.gen_address)

@router.message(CryptoBotStates.gen_address)
async def payment_instructions_handler(msg: Message, state: FSMContext):
    await msg.answer("‚ùóÔ∏è–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤—ã—à–µ...\n4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.", reply_markup=payment_instructions_kb)
    await state.set_state(CryptoBotStates.payment_instructions)

@router.message(CryptoBotStates.payment_instructions)
async def kyc_check2_handler(msg: Message, state: FSMContext):
    await msg.answer("‚ö†Ô∏è –î–ª—è —Å—É–º–º—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (KYC).", reply_markup=kyc_check_kb)
    await state.set_state(CryptoBotStates.kyc_check)

@router.message(CryptoBotStates.kyc_check)
async def manual_high_fee_handler(msg: Message, state: FSMContext):
    await msg.answer("‚ö†Ô∏è –ë–µ–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π ‚Äî 15%.", reply_markup=manual_high_fee_kb)
    await state.set_state(CryptoBotStates.manual_high_fee)

@router.message(CryptoBotStates.manual_high_fee)
async def confirmation_handler(msg: Message, state: FSMContext):
    await msg.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ?", reply_markup=confirmation_kb)
    await state.set_state(CryptoBotStates.confirmation)

@router.message(CryptoBotStates.confirmation)
async def loyalty_status_handler(msg: Message, state: FSMContext):
    await msg.answer("üåü –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –Ω—É–ª–µ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–∏:", reply_markup=loyalty_status_kb)
    await state.set_state(CryptoBotStates.loyalty_status)

@router.message(CryptoBotStates.loyalty_status)
async def history_handler(msg: Message, state: FSMContext):
    await msg.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=history_kb)
    await state.set_state(CryptoBotStates.history)

@router.message(CryptoBotStates.history)
async def operator_handler(msg: Message, state: FSMContext):
    await msg.answer("üí¨ –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–≤—è–∑–∏ 24/7! –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=operator_kb)
    await state.set_state(CryptoBotStates.operator)

@router.message(CryptoBotStates.operator)
async def back_to_menu_handler(msg: Message, state: FSMContext):
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!\n\n‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n[‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å –Ω—É–ª–µ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é]\n\n[RU] [EN] [DE]",
        reply_markup=start_kb
    )
    await state.set_state(CryptoBotStates.start)
